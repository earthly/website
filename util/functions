#!/usr/bin/env bash

# set -e

echo "functions assume they are run from repo root"
echo "run \"list\" for a list of helpers"

## Dependencies
# rg (rip grep)
# sponge (moreutils)
# bc
# $IMAGE_DOWNLOADS set to IMAGE_DOWNLOADS="/Users/adam/Downloads/images/ for example"
if [[ -z "$IMAGE_DOWNLOADS" ]]; then
 IMAGE_DOWNLOADS="$HOME"
fi

### Internal

gen-image-folder() { # generated images for post 
    echo "$(pwd)/blog/_site/generated/assets/images/$(slug)"; 
}

slug() { # slug of post
    post | rg '^[^-]*-[^-]*-[^-]*-([^\.]*)\.md' -r '$1'; 
}

image-folder() { # image folder of post
    echo "$(pwd)/blog/assets/images/$(slug)"; 
}

timestamp() { # unique id from current time
    echo "scale=0; $(date +%s) / 10 * 10" | bc -l | cut -c7-11; 
}

latest-image() { #Requires IMAGE_DOWNLOADS
    echo "$IMAGE_DOWNLOADS$(ls -Art "$IMAGE_DOWNLOADS" | tail -n 1)"; 
}

article_counts() {
    ls ./blog/_posts | cut -d'-' -f1,2 | sort | uniq -c | awk '{print $2" "$1}'
}
## imgur image download helpers

# matches:
#https://imgur.com/
#http://imgur.com/
#https://i.imgur.com/
#http://i.imgur.com/

urlpattern='https?://(i\.)?imgur\.com/[^\)]*'

download-all-imgur(){
    # shellcheck disable=SC2207
    images=($(get-imgur))
    for arg in "${images[@]}" 
    do
       download-imgur "$arg"
    done
}

get-imgur() {
    rg "$urlpattern" "$(post)" -o -N
}

download-imgur(){
    default="https://imgur.com/u7mCEge.jpeg"
    url="${1:=$default}"
    image="$(echo $url | rg '^.*/(.*\.(png|jpg|jpeg))' -r '$1')"
    if [ -z "$image" ] 
    then
        echo "Something is wrong. image not set for $url"
    else
        loc="$(image-folder)/$image"
        echo "Saving $url to $loc"
        curl -L --output "$loc" "$url"
    fi
}

imgur-fix-links(){
   rg --passthru -N 'https?://(i\.)?imgur\.com/' "$(post)" -r '{{site.images}}{{page.slug}}/' | sponge "$(post)"
}

frontmatter() {
    f="${1:=$(post)}"
    ./util/frontmatter.awk < "$f"
}

backmatter() {
    f="${1:=$(post)}"
    ./util/backmatter.awk < "$f"
}

excerpt() { # Write excerpt to frontmatter. Needs shell-gpt
    python ./util/sgpt/excerpt.py --file "$(post)"
}

excerpt-all() { # Write excerpt to frontmatter for all posts. Needs shell-gpt
    python ./util/sgpt/excerpt.py --dir "./blog/_posts/"
}

# INIT_LOCATION is used by list to find this file
INIT_LOCATION="./util/functions"

list(){
    ./util/list.awk "$INIT_LOCATION"
}

## External

post() { # active blog post
# Used by other helpers to determine what post to apply changes to
    echo "blog/_posts/$(ls -Art blog/_posts |  grep -v "checklist"  | tail -n 1)"; 
}

restorepost() { # restore post from git main
    git checkout main -- "$(post)"
}

hide_posts() # Hide All posts
# For faster blog rendering time
(
    cd blog/_posts
    for f in *.md; do mv -- "$f" "_${f}"; done
)

unhide_posts() # Undo Hide
(
    cd blog/_posts
    for f in *.md; do mv -- "$f" "${f//\_/}"; done
)


unset-functions(){ # Unset all these functions
    script=$(./util/unset.awk "$INIT_LOCATION")
    eval "$script"
}

clear-images() { # Clear images for latest post
        echo "deleting from $(gen-image-folder)"
        rm -frv "$(gen-image-folder)"
        touch "$(post)"
}

link-opp() { # List places you could link to other posts
    pip3 install python-frontmatter
    python3 ./util/suggest-links.py "$(post)"
}

lint() { # Run Linter

    # change code blocks
    cat "$(post)" | ./util/codeblock.awk | sponge "$(post)"
    # fix markdown
    markdownlint --fix "./blog/_posts/*.md"
    sed -i -E "s/“|”/\"/g" ./blog/_posts/*.md
    sed -i -E "s/‘|’/'/g" ./blog/_posts/*.md
    # remove double spaces
    sed -i -E "s/\.\s\s(\w)/. \1/g" ./blog/_posts/*.md
    sed -i -E "s/\?\s\s(\w)/? \1/g" ./blog/_posts/*.md
    # fix tabs from go
    expand -t 4 "$(post)" | sponge "$(post)"

    vale --output line --minAlertLevel error ./blog/_posts/*.md
    if grep -n 'imgur.com' ./blog/_posts/*.md
    then
        echo "Fail: external image link" && false
    fi
    (
       cd blog || exit
       markdownlint --fix "./_posts/*.md" 
    )
}

slide-markdown() { # Convert to Slide Markdown
    cat "$(post)" | poetry run python ./util/slides_markdown.py | sponge "$(post)"
    # cat "$(post)" | poetry run python ./util/slides_markdown.py > output.md
}

,vale(){ # Run Vale
  vale --output line --minAlertLevel error ./blog/_posts/*.md
}

format(){ # change code blocks
   cat "$(post)" | ./util/codeblock.awk | sponge "$(post)" 
}

drop-code(){ # Delete all code blocks
   cat "$(post)" | ./util/nocodeblock.awk | sponge "$(post)" 
}

list-images() { 
    echo "listing source images:"
    ls -d "$(image-folder)/"*

    echo "listing generated images:"
    ls -d "$(gen-image-folder)/"*
}

double-image() { # Double size of image. Using imagemagick
    ./util/superresolution/realesrgan-ncnn-vulkan -i "$1" -o "$1_new.png" -m "./util/superresolution/models" -s 2
    rm "$1"
    mv "$1_new.png" "$1"
}

jpg-large-images() { # Convert png to jpg for large images
   find ./blog/assets/ -type f  -size +2000k -print0 | xargs -0 -I {} sips -s format jpeg {}
}

compress-large-images() { # Find large images and compress them
  find  ./blog/assets/images -type f -size +1900k | while IFS= read -r file; do
    if file --mime-type "$file" | grep -q 'image/png'; then
      echo "Compressing PNG file: $file"
      tmp_file="$(mktemp)"
      pngquant --verbose --skip-if-larger --speed 1 --force --quality=85-100 -o "$tmp_file" "$file" && mv "$tmp_file" "$file"
    # elif file --mime-type "$file" | grep -q 'image/jpeg'; then
    #   echo "Compressing JPEG file: $file"
    #   jpegoptim --max=95 --overwrite "$file"
    fi
  done
}

next-date(){ # Get Next date for a post
# Gets all Tues, Wed, Thurs dates from today that don't have posts
    os="$(uname -a)"
    
    if [[ "$os" == *"Linux"* ]]
    then
        today="$(date +%F)"
        fourmonths=$(date -d "$today 120 days" +%Y-%m-%d)
        dateutils.dseq "$today"  "$fourmonths" --skip mon,wed,fri,sat,sun > available-dates.txt
    else
        today=$(date -v +1d +'%Y-%m-%d')
        fourmonths="$(date -v +4m +'%Y-%m-%d')"
        dateseq "$today"  "$fourmonths" --skip mon,wed,fri,sat,sun > available-dates.txt
    fi

    find ./blog/_posts -maxdepth 1 | awk '{ print substr( $0, 15, 10 ) }' > used-dates.txt
    result="$(comm -23 <(sort available-dates.txt) <(sort used-dates.txt) | head -n 1)"
    rm -f used-dates.txt
    rm -f available-dates.txt
    echo "$result"
}

new-post() { # Eg. new-post multi-word-slug
  default="one-two-three"
  name="${1:=$default}"
  filename="$(next-date)-$name.md"
  cat ./blog/_posts/2029-01-01-checklist.md > "./blog/_posts/$filename"
  sed -i -E "s/published: false//g" "./blog/_posts/$filename"
  mkdir "./blog/assets/images/$name"
  cp ./blog/assets/images/default-header.jpg "./blog/assets/images/$name/header.jpg"
}

set-author-image() { # Eg. set-author-image first-last
    cp "$(latest-image)" "$(pwd)/blog/assets/images/authors/$1.jpg"
    echo "saved as:"
    echo "/assets/images/authors/$1.jpg"
}

set-header() { # Set latest-image as header using $IMAGE_DOWNLOADS
    cp "$(latest-image)" "$(image-folder)/header.jpg"
    echo "wrote to $(image-folder)/header.jpg"
}

set-image() { # Save latest-image using $IMAGE_DOWNLOADS
    VAL=$(timestamp)
    echo "saving as $VAL.png \n"
    tput setaf 2 && echo  "{{site.images}}{{page.slug}}/$VAL.png" && tput setaf 9
    tput setaf 4
    echo '<div class="wide">'
    echo "{% picture content-wide-nocrop {{site.pimages}}{{page.slug}}/$VAL.png --alt {{  }} %}"
    echo "<figcaption></figcaption>"
    echo "</div>\n" 
    tput setaf 7
    echo "wrote to $(image-folder)/$VAL.png"
    cp "$(latest-image)" "$(image-folder)/$VAL.png"
}

imgur(){ # Download images from imgur from post and update post
   download-all-imgur 
   imgur-fix-links
}

tailwind(){ # Run tailwind to generate css
    (
        cd blog || exit
        npx tailwindcss -i ./assets/css/index.css -o ./assets/css/base.css --minify
    )
}

div-wide(){ # Wrap every image in post in wide markdown
    awk '/^!\[/ { 
        printf "<div class=\"wide\">\n"
        print $0 
        printf "</div>\n"
        printed[NR]=1
        }
        {
            if (printed[NR]==0)
                print $0
        }
        
        ' "$(post)" | sponge "$(post)"
}

start-blog(){ # Start up blog on localhost:4002/blog. 
# Takes args like --profile, --future, --incremental, --trace 
    (
        cd blog || exit
        if [[ $# > 0 ]]
        then
            bundle exec jekyll serve "$@"  -H 0.0.0.0 -P 4002
        else
           bundle exec jekyll serve --future --incremental -H 0.0.0.0 -P 4002
        fi 
    )
}

start-blog-verbose(){ # Start up  blog will all debug info printing.
     (
        cd blog || exit
        bundle exec jekyll serve --future --verbose --incremental --profile --trace  -H 0.0.0.0 -P 4002 | ts
    )
}

build-blog(){ # Build blog to _site folder
    (
        cd blog || exit
        time bundle exec jekyll build
    )
}
start-website(){ # Start up website on localhost:4001. 
    (
        cd website || exit
        JEKYLL_ENV=production bundle exec jekyll serve --incremental -H 0.0.0.0 -P 4001
    )
}

stop-blog(){ # kill what is on port 4002
    kill "$(lsof -i :4002 | tail -n 1 | awk '{ print $2 }')" 
}

stop-website(){ # kill what is on port 4001
    kill "$(lsof -i :4001 | tail -n 1 | awk '{ print $2 }')" 
}

lint-frontmatter(){ # Use when you are getting a weird error about frontmatter of a post
    # pip install --user yamllint
    frontmatter | yamllint -c ./util/yamlconfig.yaml -
}

## CTA Changes

cta_top() { # Change CTA Top
    poetry run python util/psupport/psupport/scripts/excerpt.py --file "$(post)"
    poetry run python util/psupport/psupport/scripts/topcta.py --file "$(post)"
}

check_python_code() { # type check python code 
    poetry run ruff . --fix
    poetry run mypy --disallow-untyped-defs --ignore-missing-imports --exclude 'blog/_plugins/' --exclude 'util/suggest-links.py' --exclude 'util/cluster.py' .
    poetry run vulture ./util/psupport
}
